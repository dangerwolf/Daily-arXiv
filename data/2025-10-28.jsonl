{"id": "2510.15585", "title": "Leveraging Test Driven Development with Large Language Models for Reliable and Verifiable Spreadsheet Code Generation: A Research Framework", "url": "https://arxiv.org/abs/2510.15585", "pdf": "https://arxiv.org/pdf/2510.15585", "abs": "https://arxiv.org/abs/2510.15585", "authors": ["Dr Simon Thorne", "Dr Advait Sarkar"], "categories": ["cs.SE", "cs.CL", "cs.PL", "F.2.2; I.2.7"], "comment": "16 pages", "summary": "Large Language Models (LLMs), such as ChatGPT, are increasingly leveraged for\ngenerating both traditional software code and spreadsheet logic. Despite their\nimpressive generative capabilities, these models frequently exhibit critical\nissues such as hallucinations, subtle logical inconsistencies, and syntactic\nerrors, risks particularly acute in high stakes domains like financial\nmodelling and scientific computations, where accuracy and reliability are\nparamount. This position paper proposes a structured research framework that\nintegrates the proven software engineering practice of Test-Driven Development\n(TDD) with Large Language Model (LLM) driven generation to enhance the\ncorrectness of, reliability of, and user confidence in generated outputs. We\nhypothesise that a \"test first\" methodology provides both technical constraints\nand cognitive scaffolding, guiding LLM outputs towards more accurate,\nverifiable, and comprehensible solutions. Our framework, applicable across\ndiverse programming contexts, from spreadsheet formula generation to scripting\nlanguages such as Python and strongly typed languages like Rust, includes an\nexplicitly outlined experimental design with clearly defined participant\ngroups, evaluation metrics, and illustrative TDD based prompting examples. By\nemphasising test driven thinking, we aim to improve computational thinking,\nprompt engineering skills, and user engagement, particularly benefiting\nspreadsheet users who often lack formal programming training yet face serious\nconsequences from logical errors. We invite collaboration to refine and\nempirically evaluate this approach, ultimately aiming to establish responsible\nand reliable LLM integration in both educational and professional development\npractices."}
{"id": "2509.07473", "title": "SheetDesigner: MLLM-Powered Spreadsheet Layout Generation with Rule-Based and Vision-Based Reflection", "url": "https://arxiv.org/abs/2509.07473", "pdf": "https://arxiv.org/pdf/2509.07473", "abs": "https://arxiv.org/abs/2509.07473", "authors": ["Qin Chen", "Yuanyi Ren", "Xiaojun Ma", "Mugeng Liu", "Han Shi", "Dongmei Zhang"], "categories": ["cs.AI"], "comment": "Accepted to EMNLP 2025 Main Conference", "summary": "Spreadsheets are critical to data-centric tasks, with rich, structured\nlayouts that enable efficient information transmission. Given the time and\nexpertise required for manual spreadsheet layout design, there is an urgent\nneed for automated solutions. However, existing automated layout models are\nill-suited to spreadsheets, as they often (1) treat components as axis-aligned\nrectangles with continuous coordinates, overlooking the inherently discrete,\ngrid-based structure of spreadsheets; and (2) neglect interrelated semantics,\nsuch as data dependencies and contextual links, unique to spreadsheets. In this\npaper, we first formalize the spreadsheet layout generation task, supported by\na seven-criterion evaluation protocol and a dataset of 3,326 spreadsheets. We\nthen introduce SheetDesigner, a zero-shot and training-free framework using\nMultimodal Large Language Models (MLLMs) that combines rule and vision\nreflection for component placement and content population. SheetDesigner\noutperforms five baselines by at least 22.6\\%. We further find that through\nvision modality, MLLMs handle overlap and balance well but struggle with\nalignment, necessitates hybrid rule and visual reflection strategies. Our codes\nand data is available at Github."}
